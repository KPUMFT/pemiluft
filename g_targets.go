// Code generated by github.com/frm-adiputra/csv2postgres DO NOT EDIT

package main

import (
	"evote/internal/target001"
	"evote/internal/target002"
	"evote/internal/target003"
	"evote/internal/target004"
	"evote/internal/target005"
	"evote/internal/target006"
	"evote/internal/target007"
	"evote/internal/viewsql"
	"fmt"
	"github.com/joho/sqltocsv"
	"os"
	"path/filepath"
)

var (
	target001DB target001.DBSynchronizer // daftar_pemilih
	target002DB target002.DBSynchronizer // daftar_pilihan
	target003DB target003.DBSynchronizer // ref_calon_dpm
	target004DB target004.DBSynchronizer // ref_calon_gubernur
	target005DB target005.DBSynchronizer // ref_calon_himatro
	target006DB target006.DBSynchronizer // ref_calon_hmti
	target007DB target007.DBSynchronizer // ref_dapil
)

func init() {
	target001DB = target001.NewDBSynchronizer()
	target002DB = target002.NewDBSynchronizer()
	target003DB = target003.NewDBSynchronizer()
	target004DB = target004.NewDBSynchronizer()
	target005DB = target005.NewDBSynchronizer()
	target006DB = target006.NewDBSynchronizer()
	target007DB = target007.NewDBSynchronizer()
}

// Target001Drop drops table daftar_pemilih
func Target001Drop(dryRun bool) error {
	fmt.Print("daftar_pemilih: Dropping table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target001DB.Drop(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target001DepDrop drops table daftar_pemilih after
// executing all of its dependencies
func Target001DepDrop(dryRun bool) error {
	if err := Target008Drop(dryRun); err != nil { // vw_hasil_dpm
		return err
	}
	if err := Target010Drop(dryRun); err != nil { // vw_hasil_hmp
		return err
	}
	if err := Target009Drop(dryRun); err != nil { // vw_hasil_gubernur
		return err
	}
	if err := Target011Drop(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target001Drop(dryRun); err != nil { // daftar_pemilih
		return err
	}
	return nil
}

// Target001Create creates table daftar_pemilih
func Target001Create(dryRun bool) error {
	fmt.Print("daftar_pemilih: Creating table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target001DB.Create(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target001DepCreate creates table daftar_pemilih after
// executing all of its dependencies
func Target001DepCreate(dryRun bool) error {
	if err := Target007Create(dryRun); err != nil { // ref_dapil
		return err
	}
	if err := Target001Create(dryRun); err != nil { // daftar_pemilih
		return err
	}
	return nil
}

// Target001Delete deletes rows from table daftar_pemilih
func Target001Delete(dryRun bool) error {
	fmt.Print("daftar_pemilih: Deleting table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target001DB.Delete(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target001DepDelete deletes rows from table daftar_pemilih after
// executing all of its dependencies
func Target001DepDelete(dryRun bool) error {
	if err := Target001Delete(dryRun); err != nil { // daftar_pemilih
		return err
	}
	return nil
}

// Target001Fill fills rows of table daftar_pemilih
func Target001Fill(dryRun bool) error {
	fmt.Print("daftar_pemilih: Filling table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target001DB.Fill(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Printf(" %d records [OK]\n", target001DB.RowCount())
	return nil
}

// Target001DepFill fills rows of table daftar_pemilih after
// executing all of its dependencies
func Target001DepFill(dryRun bool) error {
	if err := Target007Fill(dryRun); err != nil { // ref_dapil
		return err
	}
	if err := Target001Fill(dryRun); err != nil { // daftar_pemilih
		return err
	}
	return nil
}

// Target001Up recreates and fill rows of table daftar_pemilih
func Target001Up(dryRun bool) error {
	if err := Target001DepDrop(dryRun); err != nil {
		return err
	}

	if err := Target001DepCreate(dryRun); err != nil {
		return err
	}

	if err := Target001DepFill(dryRun); err != nil {
		return err
	}
	return nil
}

// Target001Down drops the table daftar_pemilih and its dependants
func Target001Down(dryRun bool) error {
	return Target001DepDrop(dryRun)
}

// Target002Drop drops table daftar_pilihan
func Target002Drop(dryRun bool) error {
	fmt.Print("daftar_pilihan: Dropping table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target002DB.Drop(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target002DepDrop drops table daftar_pilihan after
// executing all of its dependencies
func Target002DepDrop(dryRun bool) error {
	if err := Target008Drop(dryRun); err != nil { // vw_hasil_dpm
		return err
	}
	if err := Target010Drop(dryRun); err != nil { // vw_hasil_hmp
		return err
	}
	if err := Target009Drop(dryRun); err != nil { // vw_hasil_gubernur
		return err
	}
	if err := Target011Drop(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target002Drop(dryRun); err != nil { // daftar_pilihan
		return err
	}
	return nil
}

// Target002Create creates table daftar_pilihan
func Target002Create(dryRun bool) error {
	fmt.Print("daftar_pilihan: Creating table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target002DB.Create(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target002DepCreate creates table daftar_pilihan after
// executing all of its dependencies
func Target002DepCreate(dryRun bool) error {
	if err := Target007Create(dryRun); err != nil { // ref_dapil
		return err
	}
	if err := Target005Create(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	if err := Target003Create(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	if err := Target004Create(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	if err := Target006Create(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	if err := Target002Create(dryRun); err != nil { // daftar_pilihan
		return err
	}
	return nil
}

// Target002Delete deletes rows from table daftar_pilihan
func Target002Delete(dryRun bool) error {
	fmt.Print("daftar_pilihan: Deleting table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target002DB.Delete(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target002DepDelete deletes rows from table daftar_pilihan after
// executing all of its dependencies
func Target002DepDelete(dryRun bool) error {
	if err := Target002Delete(dryRun); err != nil { // daftar_pilihan
		return err
	}
	return nil
}

// Target002Fill fills rows of table daftar_pilihan
func Target002Fill(dryRun bool) error {
	fmt.Print("daftar_pilihan: Filling table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target002DB.Fill(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Printf(" %d records [OK]\n", target002DB.RowCount())
	return nil
}

// Target002DepFill fills rows of table daftar_pilihan after
// executing all of its dependencies
func Target002DepFill(dryRun bool) error {
	if err := Target007Fill(dryRun); err != nil { // ref_dapil
		return err
	}
	if err := Target005Fill(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	if err := Target003Fill(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	if err := Target004Fill(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	if err := Target006Fill(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	if err := Target002Fill(dryRun); err != nil { // daftar_pilihan
		return err
	}
	return nil
}

// Target002Up recreates and fill rows of table daftar_pilihan
func Target002Up(dryRun bool) error {
	if err := Target002DepDrop(dryRun); err != nil {
		return err
	}

	if err := Target002DepCreate(dryRun); err != nil {
		return err
	}

	if err := Target002DepFill(dryRun); err != nil {
		return err
	}
	return nil
}

// Target002Down drops the table daftar_pilihan and its dependants
func Target002Down(dryRun bool) error {
	return Target002DepDrop(dryRun)
}

// Target003Drop drops table ref_calon_dpm
func Target003Drop(dryRun bool) error {
	fmt.Print("ref_calon_dpm: Dropping table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target003DB.Drop(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target003DepDrop drops table ref_calon_dpm after
// executing all of its dependencies
func Target003DepDrop(dryRun bool) error {
	if err := Target008Drop(dryRun); err != nil { // vw_hasil_dpm
		return err
	}
	if err := Target010Drop(dryRun); err != nil { // vw_hasil_hmp
		return err
	}
	if err := Target009Drop(dryRun); err != nil { // vw_hasil_gubernur
		return err
	}
	if err := Target011Drop(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target002Drop(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target003Drop(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	return nil
}

// Target003Create creates table ref_calon_dpm
func Target003Create(dryRun bool) error {
	fmt.Print("ref_calon_dpm: Creating table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target003DB.Create(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target003DepCreate creates table ref_calon_dpm after
// executing all of its dependencies
func Target003DepCreate(dryRun bool) error {
	if err := Target003Create(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	return nil
}

// Target003Delete deletes rows from table ref_calon_dpm
func Target003Delete(dryRun bool) error {
	fmt.Print("ref_calon_dpm: Deleting table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target003DB.Delete(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target003DepDelete deletes rows from table ref_calon_dpm after
// executing all of its dependencies
func Target003DepDelete(dryRun bool) error {
	if err := Target002Delete(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target003Delete(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	return nil
}

// Target003Fill fills rows of table ref_calon_dpm
func Target003Fill(dryRun bool) error {
	fmt.Print("ref_calon_dpm: Filling table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target003DB.Fill(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Printf(" %d records [OK]\n", target003DB.RowCount())
	return nil
}

// Target003DepFill fills rows of table ref_calon_dpm after
// executing all of its dependencies
func Target003DepFill(dryRun bool) error {
	if err := Target003Fill(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	return nil
}

// Target003Up recreates and fill rows of table ref_calon_dpm
func Target003Up(dryRun bool) error {
	if err := Target003DepDrop(dryRun); err != nil {
		return err
	}

	if err := Target003DepCreate(dryRun); err != nil {
		return err
	}

	if err := Target003DepFill(dryRun); err != nil {
		return err
	}
	return nil
}

// Target003Down drops the table ref_calon_dpm and its dependants
func Target003Down(dryRun bool) error {
	return Target003DepDrop(dryRun)
}

// Target004Drop drops table ref_calon_gubernur
func Target004Drop(dryRun bool) error {
	fmt.Print("ref_calon_gubernur: Dropping table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target004DB.Drop(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target004DepDrop drops table ref_calon_gubernur after
// executing all of its dependencies
func Target004DepDrop(dryRun bool) error {
	if err := Target008Drop(dryRun); err != nil { // vw_hasil_dpm
		return err
	}
	if err := Target010Drop(dryRun); err != nil { // vw_hasil_hmp
		return err
	}
	if err := Target009Drop(dryRun); err != nil { // vw_hasil_gubernur
		return err
	}
	if err := Target011Drop(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target002Drop(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target004Drop(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	return nil
}

// Target004Create creates table ref_calon_gubernur
func Target004Create(dryRun bool) error {
	fmt.Print("ref_calon_gubernur: Creating table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target004DB.Create(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target004DepCreate creates table ref_calon_gubernur after
// executing all of its dependencies
func Target004DepCreate(dryRun bool) error {
	if err := Target004Create(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	return nil
}

// Target004Delete deletes rows from table ref_calon_gubernur
func Target004Delete(dryRun bool) error {
	fmt.Print("ref_calon_gubernur: Deleting table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target004DB.Delete(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target004DepDelete deletes rows from table ref_calon_gubernur after
// executing all of its dependencies
func Target004DepDelete(dryRun bool) error {
	if err := Target002Delete(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target004Delete(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	return nil
}

// Target004Fill fills rows of table ref_calon_gubernur
func Target004Fill(dryRun bool) error {
	fmt.Print("ref_calon_gubernur: Filling table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target004DB.Fill(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Printf(" %d records [OK]\n", target004DB.RowCount())
	return nil
}

// Target004DepFill fills rows of table ref_calon_gubernur after
// executing all of its dependencies
func Target004DepFill(dryRun bool) error {
	if err := Target004Fill(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	return nil
}

// Target004Up recreates and fill rows of table ref_calon_gubernur
func Target004Up(dryRun bool) error {
	if err := Target004DepDrop(dryRun); err != nil {
		return err
	}

	if err := Target004DepCreate(dryRun); err != nil {
		return err
	}

	if err := Target004DepFill(dryRun); err != nil {
		return err
	}
	return nil
}

// Target004Down drops the table ref_calon_gubernur and its dependants
func Target004Down(dryRun bool) error {
	return Target004DepDrop(dryRun)
}

// Target005Drop drops table ref_calon_himatro
func Target005Drop(dryRun bool) error {
	fmt.Print("ref_calon_himatro: Dropping table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target005DB.Drop(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target005DepDrop drops table ref_calon_himatro after
// executing all of its dependencies
func Target005DepDrop(dryRun bool) error {
	if err := Target008Drop(dryRun); err != nil { // vw_hasil_dpm
		return err
	}
	if err := Target010Drop(dryRun); err != nil { // vw_hasil_hmp
		return err
	}
	if err := Target009Drop(dryRun); err != nil { // vw_hasil_gubernur
		return err
	}
	if err := Target011Drop(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target002Drop(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target005Drop(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	return nil
}

// Target005Create creates table ref_calon_himatro
func Target005Create(dryRun bool) error {
	fmt.Print("ref_calon_himatro: Creating table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target005DB.Create(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target005DepCreate creates table ref_calon_himatro after
// executing all of its dependencies
func Target005DepCreate(dryRun bool) error {
	if err := Target005Create(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	return nil
}

// Target005Delete deletes rows from table ref_calon_himatro
func Target005Delete(dryRun bool) error {
	fmt.Print("ref_calon_himatro: Deleting table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target005DB.Delete(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target005DepDelete deletes rows from table ref_calon_himatro after
// executing all of its dependencies
func Target005DepDelete(dryRun bool) error {
	if err := Target002Delete(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target005Delete(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	return nil
}

// Target005Fill fills rows of table ref_calon_himatro
func Target005Fill(dryRun bool) error {
	fmt.Print("ref_calon_himatro: Filling table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target005DB.Fill(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Printf(" %d records [OK]\n", target005DB.RowCount())
	return nil
}

// Target005DepFill fills rows of table ref_calon_himatro after
// executing all of its dependencies
func Target005DepFill(dryRun bool) error {
	if err := Target005Fill(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	return nil
}

// Target005Up recreates and fill rows of table ref_calon_himatro
func Target005Up(dryRun bool) error {
	if err := Target005DepDrop(dryRun); err != nil {
		return err
	}

	if err := Target005DepCreate(dryRun); err != nil {
		return err
	}

	if err := Target005DepFill(dryRun); err != nil {
		return err
	}
	return nil
}

// Target005Down drops the table ref_calon_himatro and its dependants
func Target005Down(dryRun bool) error {
	return Target005DepDrop(dryRun)
}

// Target006Drop drops table ref_calon_hmti
func Target006Drop(dryRun bool) error {
	fmt.Print("ref_calon_hmti: Dropping table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target006DB.Drop(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target006DepDrop drops table ref_calon_hmti after
// executing all of its dependencies
func Target006DepDrop(dryRun bool) error {
	if err := Target008Drop(dryRun); err != nil { // vw_hasil_dpm
		return err
	}
	if err := Target010Drop(dryRun); err != nil { // vw_hasil_hmp
		return err
	}
	if err := Target009Drop(dryRun); err != nil { // vw_hasil_gubernur
		return err
	}
	if err := Target011Drop(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target002Drop(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target006Drop(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	return nil
}

// Target006Create creates table ref_calon_hmti
func Target006Create(dryRun bool) error {
	fmt.Print("ref_calon_hmti: Creating table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target006DB.Create(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target006DepCreate creates table ref_calon_hmti after
// executing all of its dependencies
func Target006DepCreate(dryRun bool) error {
	if err := Target006Create(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	return nil
}

// Target006Delete deletes rows from table ref_calon_hmti
func Target006Delete(dryRun bool) error {
	fmt.Print("ref_calon_hmti: Deleting table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target006DB.Delete(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target006DepDelete deletes rows from table ref_calon_hmti after
// executing all of its dependencies
func Target006DepDelete(dryRun bool) error {
	if err := Target002Delete(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target006Delete(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	return nil
}

// Target006Fill fills rows of table ref_calon_hmti
func Target006Fill(dryRun bool) error {
	fmt.Print("ref_calon_hmti: Filling table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target006DB.Fill(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Printf(" %d records [OK]\n", target006DB.RowCount())
	return nil
}

// Target006DepFill fills rows of table ref_calon_hmti after
// executing all of its dependencies
func Target006DepFill(dryRun bool) error {
	if err := Target006Fill(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	return nil
}

// Target006Up recreates and fill rows of table ref_calon_hmti
func Target006Up(dryRun bool) error {
	if err := Target006DepDrop(dryRun); err != nil {
		return err
	}

	if err := Target006DepCreate(dryRun); err != nil {
		return err
	}

	if err := Target006DepFill(dryRun); err != nil {
		return err
	}
	return nil
}

// Target006Down drops the table ref_calon_hmti and its dependants
func Target006Down(dryRun bool) error {
	return Target006DepDrop(dryRun)
}

// Target007Drop drops table ref_dapil
func Target007Drop(dryRun bool) error {
	fmt.Print("ref_dapil: Dropping table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target007DB.Drop(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target007DepDrop drops table ref_dapil after
// executing all of its dependencies
func Target007DepDrop(dryRun bool) error {
	if err := Target008Drop(dryRun); err != nil { // vw_hasil_dpm
		return err
	}
	if err := Target010Drop(dryRun); err != nil { // vw_hasil_hmp
		return err
	}
	if err := Target009Drop(dryRun); err != nil { // vw_hasil_gubernur
		return err
	}
	if err := Target011Drop(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target002Drop(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target001Drop(dryRun); err != nil { // daftar_pemilih
		return err
	}
	if err := Target007Drop(dryRun); err != nil { // ref_dapil
		return err
	}
	return nil
}

// Target007Create creates table ref_dapil
func Target007Create(dryRun bool) error {
	fmt.Print("ref_dapil: Creating table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target007DB.Create(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target007DepCreate creates table ref_dapil after
// executing all of its dependencies
func Target007DepCreate(dryRun bool) error {
	if err := Target007Create(dryRun); err != nil { // ref_dapil
		return err
	}
	return nil
}

// Target007Delete deletes rows from table ref_dapil
func Target007Delete(dryRun bool) error {
	fmt.Print("ref_dapil: Deleting table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target007DB.Delete(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target007DepDelete deletes rows from table ref_dapil after
// executing all of its dependencies
func Target007DepDelete(dryRun bool) error {
	if err := Target002Delete(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target001Delete(dryRun); err != nil { // daftar_pemilih
		return err
	}
	if err := Target007Delete(dryRun); err != nil { // ref_dapil
		return err
	}
	return nil
}

// Target007Fill fills rows of table ref_dapil
func Target007Fill(dryRun bool) error {
	fmt.Print("ref_dapil: Filling table...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	err = target007DB.Fill(db)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Printf(" %d records [OK]\n", target007DB.RowCount())
	return nil
}

// Target007DepFill fills rows of table ref_dapil after
// executing all of its dependencies
func Target007DepFill(dryRun bool) error {
	if err := Target007Fill(dryRun); err != nil { // ref_dapil
		return err
	}
	return nil
}

// Target007Up recreates and fill rows of table ref_dapil
func Target007Up(dryRun bool) error {
	if err := Target007DepDrop(dryRun); err != nil {
		return err
	}

	if err := Target007DepCreate(dryRun); err != nil {
		return err
	}

	if err := Target007DepFill(dryRun); err != nil {
		return err
	}
	return nil
}

// Target007Down drops the table ref_dapil and its dependants
func Target007Down(dryRun bool) error {
	return Target007DepDrop(dryRun)
}

// Target008Drop drops view vw_hasil_dpm
func Target008Drop(dryRun bool) error {
	fmt.Print("vw_hasil_dpm: Dropping view...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	_, err = db.Exec(viewsql.Target008Drop)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target008DepDrop drops view vw_hasil_dpm after
// executing all of its dependencies
func Target008DepDrop(dryRun bool) error {
	if err := Target008Drop(dryRun); err != nil { // vw_hasil_dpm
		return err
	}
	return nil
}

// Target008Create creates view vw_hasil_dpm
func Target008Create(dryRun bool) error {
	fmt.Print("vw_hasil_dpm: Creating view...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	_, err = db.Exec(viewsql.Target008Create)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target008DepCreate creates view vw_hasil_dpm after
// executing all of its dependencies
func Target008DepCreate(dryRun bool) error {
	if err := Target007Create(dryRun); err != nil { // ref_dapil
		return err
	}
	if err := Target005Create(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	if err := Target003Create(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	if err := Target004Create(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	if err := Target006Create(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	if err := Target001Create(dryRun); err != nil { // daftar_pemilih
		return err
	}
	if err := Target002Create(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target011Create(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target008Create(dryRun); err != nil { // vw_hasil_dpm
		return err
	}
	return nil
}

// Target008DepFill fills rows of its dependencies
func Target008DepFill(dryRun bool) error {
	if err := Target007Fill(dryRun); err != nil { // ref_dapil
		return err
	}
	if err := Target005Fill(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	if err := Target003Fill(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	if err := Target004Fill(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	if err := Target006Fill(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	if err := Target001Fill(dryRun); err != nil { // daftar_pemilih
		return err
	}
	if err := Target002Fill(dryRun); err != nil { // daftar_pilihan
		return err
	}
	return nil
}

// Target008Export exports view's query result to CSV.
func Target008Export(dryRun bool) error {
	fmt.Print("vw_hasil_dpm: Exporting to CSV...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	dir := filepath.Dir(`out/vw_hasil_dpm.csv`)
	err := os.MkdirAll(dir, 0777)
	if err != nil {
		fmt.Println("[FAILED]")
		return fmt.Errorf("vw_hasil_dpm export to CSV: %w", err)
	}

	db, err := newDBConn()
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	defer db.Close()

	rows, err := db.Query(`SELECT * FROM "evote"."vw_hasil_dpm"`)
	if err != nil {
		fmt.Println("[FAILED]")
		return fmt.Errorf("vw_hasil_dpm export to CSV: %w", err)
	}
	defer rows.Close()

	err = sqltocsv.WriteFile("out/vw_hasil_dpm.csv", rows)
	if err != nil {
		fmt.Println("[FAILED]")
		return fmt.Errorf("vw_hasil_dpm export to CSV: %w", err)
	}
	fmt.Println("[OK]")
	return nil
}

// Target008DepExport runs export on this view (if it has)
// and its dependencies
func Target008DepExport(dryRun bool) error {
	if err := Target011Export(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target008Export(dryRun); err != nil { // vw_hasil_dpm
		return err
	}
	return nil
}

// Target008Up recreates view vw_hasil_dpm
func Target008Up(dryRun bool) error {
	if err := Target008DepDrop(dryRun); err != nil {
		return err
	}

	if err := Target008DepCreate(dryRun); err != nil {
		return err
	}

	if err := Target008DepFill(dryRun); err != nil {
		return err
	}
	if err := Target008DepExport(dryRun); err != nil {
		return err
	}
	return nil
}

// Target008Down drops view vw_hasil_dpm and its dependants
func Target008Down(dryRun bool) error {
	return Target008DepDrop(dryRun)
}

// Target009Drop drops view vw_hasil_gubernur
func Target009Drop(dryRun bool) error {
	fmt.Print("vw_hasil_gubernur: Dropping view...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	_, err = db.Exec(viewsql.Target009Drop)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target009DepDrop drops view vw_hasil_gubernur after
// executing all of its dependencies
func Target009DepDrop(dryRun bool) error {
	if err := Target009Drop(dryRun); err != nil { // vw_hasil_gubernur
		return err
	}
	return nil
}

// Target009Create creates view vw_hasil_gubernur
func Target009Create(dryRun bool) error {
	fmt.Print("vw_hasil_gubernur: Creating view...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	_, err = db.Exec(viewsql.Target009Create)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target009DepCreate creates view vw_hasil_gubernur after
// executing all of its dependencies
func Target009DepCreate(dryRun bool) error {
	if err := Target007Create(dryRun); err != nil { // ref_dapil
		return err
	}
	if err := Target005Create(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	if err := Target003Create(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	if err := Target004Create(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	if err := Target006Create(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	if err := Target001Create(dryRun); err != nil { // daftar_pemilih
		return err
	}
	if err := Target002Create(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target011Create(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target009Create(dryRun); err != nil { // vw_hasil_gubernur
		return err
	}
	return nil
}

// Target009DepFill fills rows of its dependencies
func Target009DepFill(dryRun bool) error {
	if err := Target007Fill(dryRun); err != nil { // ref_dapil
		return err
	}
	if err := Target005Fill(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	if err := Target003Fill(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	if err := Target004Fill(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	if err := Target006Fill(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	if err := Target001Fill(dryRun); err != nil { // daftar_pemilih
		return err
	}
	if err := Target002Fill(dryRun); err != nil { // daftar_pilihan
		return err
	}
	return nil
}

// Target009Export exports view's query result to CSV.
func Target009Export(dryRun bool) error {
	fmt.Print("vw_hasil_gubernur: Exporting to CSV...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	dir := filepath.Dir(`out/vw_hasil_gubernur.csv`)
	err := os.MkdirAll(dir, 0777)
	if err != nil {
		fmt.Println("[FAILED]")
		return fmt.Errorf("vw_hasil_gubernur export to CSV: %w", err)
	}

	db, err := newDBConn()
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	defer db.Close()

	rows, err := db.Query(`SELECT * FROM "evote"."vw_hasil_gubernur"`)
	if err != nil {
		fmt.Println("[FAILED]")
		return fmt.Errorf("vw_hasil_gubernur export to CSV: %w", err)
	}
	defer rows.Close()

	err = sqltocsv.WriteFile("out/vw_hasil_gubernur.csv", rows)
	if err != nil {
		fmt.Println("[FAILED]")
		return fmt.Errorf("vw_hasil_gubernur export to CSV: %w", err)
	}
	fmt.Println("[OK]")
	return nil
}

// Target009DepExport runs export on this view (if it has)
// and its dependencies
func Target009DepExport(dryRun bool) error {
	if err := Target011Export(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target009Export(dryRun); err != nil { // vw_hasil_gubernur
		return err
	}
	return nil
}

// Target009Up recreates view vw_hasil_gubernur
func Target009Up(dryRun bool) error {
	if err := Target009DepDrop(dryRun); err != nil {
		return err
	}

	if err := Target009DepCreate(dryRun); err != nil {
		return err
	}

	if err := Target009DepFill(dryRun); err != nil {
		return err
	}
	if err := Target009DepExport(dryRun); err != nil {
		return err
	}
	return nil
}

// Target009Down drops view vw_hasil_gubernur and its dependants
func Target009Down(dryRun bool) error {
	return Target009DepDrop(dryRun)
}

// Target010Drop drops view vw_hasil_hmp
func Target010Drop(dryRun bool) error {
	fmt.Print("vw_hasil_hmp: Dropping view...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	_, err = db.Exec(viewsql.Target010Drop)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target010DepDrop drops view vw_hasil_hmp after
// executing all of its dependencies
func Target010DepDrop(dryRun bool) error {
	if err := Target010Drop(dryRun); err != nil { // vw_hasil_hmp
		return err
	}
	return nil
}

// Target010Create creates view vw_hasil_hmp
func Target010Create(dryRun bool) error {
	fmt.Print("vw_hasil_hmp: Creating view...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	_, err = db.Exec(viewsql.Target010Create)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target010DepCreate creates view vw_hasil_hmp after
// executing all of its dependencies
func Target010DepCreate(dryRun bool) error {
	if err := Target007Create(dryRun); err != nil { // ref_dapil
		return err
	}
	if err := Target005Create(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	if err := Target003Create(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	if err := Target004Create(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	if err := Target006Create(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	if err := Target001Create(dryRun); err != nil { // daftar_pemilih
		return err
	}
	if err := Target002Create(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target011Create(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target010Create(dryRun); err != nil { // vw_hasil_hmp
		return err
	}
	return nil
}

// Target010DepFill fills rows of its dependencies
func Target010DepFill(dryRun bool) error {
	if err := Target007Fill(dryRun); err != nil { // ref_dapil
		return err
	}
	if err := Target005Fill(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	if err := Target003Fill(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	if err := Target004Fill(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	if err := Target006Fill(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	if err := Target001Fill(dryRun); err != nil { // daftar_pemilih
		return err
	}
	if err := Target002Fill(dryRun); err != nil { // daftar_pilihan
		return err
	}
	return nil
}

// Target010Export exports view's query result to CSV.
func Target010Export(dryRun bool) error {
	fmt.Print("vw_hasil_hmp: Exporting to CSV...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	dir := filepath.Dir(`out/vw_hasil_hmp.csv`)
	err := os.MkdirAll(dir, 0777)
	if err != nil {
		fmt.Println("[FAILED]")
		return fmt.Errorf("vw_hasil_hmp export to CSV: %w", err)
	}

	db, err := newDBConn()
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	defer db.Close()

	rows, err := db.Query(`SELECT * FROM "evote"."vw_hasil_hmp"`)
	if err != nil {
		fmt.Println("[FAILED]")
		return fmt.Errorf("vw_hasil_hmp export to CSV: %w", err)
	}
	defer rows.Close()

	err = sqltocsv.WriteFile("out/vw_hasil_hmp.csv", rows)
	if err != nil {
		fmt.Println("[FAILED]")
		return fmt.Errorf("vw_hasil_hmp export to CSV: %w", err)
	}
	fmt.Println("[OK]")
	return nil
}

// Target010DepExport runs export on this view (if it has)
// and its dependencies
func Target010DepExport(dryRun bool) error {
	if err := Target011Export(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target010Export(dryRun); err != nil { // vw_hasil_hmp
		return err
	}
	return nil
}

// Target010Up recreates view vw_hasil_hmp
func Target010Up(dryRun bool) error {
	if err := Target010DepDrop(dryRun); err != nil {
		return err
	}

	if err := Target010DepCreate(dryRun); err != nil {
		return err
	}

	if err := Target010DepFill(dryRun); err != nil {
		return err
	}
	if err := Target010DepExport(dryRun); err != nil {
		return err
	}
	return nil
}

// Target010Down drops view vw_hasil_hmp and its dependants
func Target010Down(dryRun bool) error {
	return Target010DepDrop(dryRun)
}

// Target011Drop drops view vw_pilihan
func Target011Drop(dryRun bool) error {
	fmt.Print("vw_pilihan: Dropping view...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	_, err = db.Exec(viewsql.Target011Drop)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target011DepDrop drops view vw_pilihan after
// executing all of its dependencies
func Target011DepDrop(dryRun bool) error {
	if err := Target008Drop(dryRun); err != nil { // vw_hasil_dpm
		return err
	}
	if err := Target010Drop(dryRun); err != nil { // vw_hasil_hmp
		return err
	}
	if err := Target009Drop(dryRun); err != nil { // vw_hasil_gubernur
		return err
	}
	if err := Target011Drop(dryRun); err != nil { // vw_pilihan
		return err
	}
	return nil
}

// Target011Create creates view vw_pilihan
func Target011Create(dryRun bool) error {
	fmt.Print("vw_pilihan: Creating view...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	db, err := newDBConn()
	if err != nil {
		return err
	}
	defer db.Close()

	_, err = db.Exec(viewsql.Target011Create)
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	fmt.Println("[OK]")
	return nil
}

// Target011DepCreate creates view vw_pilihan after
// executing all of its dependencies
func Target011DepCreate(dryRun bool) error {
	if err := Target007Create(dryRun); err != nil { // ref_dapil
		return err
	}
	if err := Target005Create(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	if err := Target003Create(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	if err := Target004Create(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	if err := Target006Create(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	if err := Target001Create(dryRun); err != nil { // daftar_pemilih
		return err
	}
	if err := Target002Create(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target011Create(dryRun); err != nil { // vw_pilihan
		return err
	}
	return nil
}

// Target011DepFill fills rows of its dependencies
func Target011DepFill(dryRun bool) error {
	if err := Target007Fill(dryRun); err != nil { // ref_dapil
		return err
	}
	if err := Target005Fill(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	if err := Target003Fill(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	if err := Target004Fill(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	if err := Target006Fill(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	if err := Target001Fill(dryRun); err != nil { // daftar_pemilih
		return err
	}
	if err := Target002Fill(dryRun); err != nil { // daftar_pilihan
		return err
	}
	return nil
}

// Target011Export exports view's query result to CSV.
func Target011Export(dryRun bool) error {
	fmt.Print("vw_pilihan: Exporting to CSV...")
	if dryRun {
		fmt.Println("[OK]")
		return nil
	}

	dir := filepath.Dir(`out/vw_pilihan.csv`)
	err := os.MkdirAll(dir, 0777)
	if err != nil {
		fmt.Println("[FAILED]")
		return fmt.Errorf("vw_pilihan export to CSV: %w", err)
	}

	db, err := newDBConn()
	if err != nil {
		fmt.Println("[FAILED]")
		return err
	}
	defer db.Close()

	rows, err := db.Query(`SELECT * FROM "evote"."vw_pilihan"`)
	if err != nil {
		fmt.Println("[FAILED]")
		return fmt.Errorf("vw_pilihan export to CSV: %w", err)
	}
	defer rows.Close()

	err = sqltocsv.WriteFile("out/vw_pilihan.csv", rows)
	if err != nil {
		fmt.Println("[FAILED]")
		return fmt.Errorf("vw_pilihan export to CSV: %w", err)
	}
	fmt.Println("[OK]")
	return nil
}

// Target011DepExport runs export on this view (if it has)
// and its dependencies
func Target011DepExport(dryRun bool) error {
	if err := Target011Export(dryRun); err != nil { // vw_pilihan
		return err
	}
	return nil
}

// Target011Up recreates view vw_pilihan
func Target011Up(dryRun bool) error {
	if err := Target011DepDrop(dryRun); err != nil {
		return err
	}

	if err := Target011DepCreate(dryRun); err != nil {
		return err
	}

	if err := Target011DepFill(dryRun); err != nil {
		return err
	}
	if err := Target011DepExport(dryRun); err != nil {
		return err
	}
	return nil
}

// Target011Down drops view vw_pilihan and its dependants
func Target011Down(dryRun bool) error {
	return Target011DepDrop(dryRun)
}

// AllUp recreates and fill rows of all tables
func AllUp(dryRun bool) error {
	if err := Target008Drop(dryRun); err != nil { // vw_hasil_dpm
		return err
	}
	if err := Target009Drop(dryRun); err != nil { // vw_hasil_gubernur
		return err
	}
	if err := Target010Drop(dryRun); err != nil { // vw_hasil_hmp
		return err
	}
	if err := Target011Drop(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target002Drop(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target001Drop(dryRun); err != nil { // daftar_pemilih
		return err
	}
	if err := Target006Drop(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	if err := Target004Drop(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	if err := Target003Drop(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	if err := Target005Drop(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	if err := Target007Drop(dryRun); err != nil { // ref_dapil
		return err
	}
	if err := Target003Create(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	if err := Target004Create(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	if err := Target005Create(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	if err := Target006Create(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	if err := Target007Create(dryRun); err != nil { // ref_dapil
		return err
	}
	if err := Target001Create(dryRun); err != nil { // daftar_pemilih
		return err
	}
	if err := Target002Create(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target011Create(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target009Create(dryRun); err != nil { // vw_hasil_gubernur
		return err
	}
	if err := Target010Create(dryRun); err != nil { // vw_hasil_hmp
		return err
	}
	if err := Target008Create(dryRun); err != nil { // vw_hasil_dpm
		return err
	}
	if err := Target003Fill(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	if err := Target004Fill(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	if err := Target005Fill(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	if err := Target006Fill(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	if err := Target007Fill(dryRun); err != nil { // ref_dapil
		return err
	}
	if err := Target001Fill(dryRun); err != nil { // daftar_pemilih
		return err
	}
	if err := Target002Fill(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target011Export(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target009Export(dryRun); err != nil { // vw_hasil_gubernur
		return err
	}
	if err := Target010Export(dryRun); err != nil { // vw_hasil_hmp
		return err
	}
	if err := Target008Export(dryRun); err != nil { // vw_hasil_dpm
		return err
	}
	return nil
}

// AllDown drops all tables and its dependants
func AllDown(dryRun bool) error {
	if err := Target008Drop(dryRun); err != nil { // vw_hasil_dpm
		return err
	}
	if err := Target009Drop(dryRun); err != nil { // vw_hasil_gubernur
		return err
	}
	if err := Target010Drop(dryRun); err != nil { // vw_hasil_hmp
		return err
	}
	if err := Target011Drop(dryRun); err != nil { // vw_pilihan
		return err
	}
	if err := Target002Drop(dryRun); err != nil { // daftar_pilihan
		return err
	}
	if err := Target001Drop(dryRun); err != nil { // daftar_pemilih
		return err
	}
	if err := Target006Drop(dryRun); err != nil { // ref_calon_hmti
		return err
	}
	if err := Target004Drop(dryRun); err != nil { // ref_calon_gubernur
		return err
	}
	if err := Target003Drop(dryRun); err != nil { // ref_calon_dpm
		return err
	}
	if err := Target005Drop(dryRun); err != nil { // ref_calon_himatro
		return err
	}
	if err := Target007Drop(dryRun); err != nil { // ref_dapil
		return err
	}
	return nil
}
